name: RDP + Tailscale + RustDesk + (Optional) Chrome Remote Desktop (B+)

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin, no Bearer)"
        required: true
      ts_authkey:
        description: "Tailscale Auth key (reusable or ephemeral)"
        required: true
      quick_test:
        description: "Run 5-minute test"
        type: boolean
        default: false
      runtime_minutes:
        description: "Runtime (max 360; default 355 when not test)"
        required: false
        default: "355"
      do_purge:
        description: "Purge bullet* devices at start (single instance only)"
        required: false
        default: "true"
      cycles:
        description: "0=stop after this run; N=handoffs left incl this run"
        required: false
        default: "0"
      rdp_count:
        description: "How many RDP instances (1-10) [ignored if CRD provided]"
        required: false
        default: "1"
      crd_code:
        description: >-
          Paste raw CRD code (4/0AV...), full PowerShell command, or text/URL containing --code="4/...".
        required: false
        default: ""
      crd_pin:
        description: "CRD PIN (6–12 digits). Used when launching CRD to avoid interactive prompt."
        required: false
        default: "123456"

  schedule:
    - cron: "*/5 * * * *"   # mỗi 5 phút nếu job bị dừng hoặc lỗi sẽ tự dispatch lại

permissions:
  contents: read
  actions: write

defaults:
  run:
    shell: pwsh

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
      multi:  ${{ steps.mk.outputs.multi }}
    steps:
    - id: mk
      run: |
        $crd = @'
        ${{ inputs.crd_code }}
        '@.Trim()

        if ($crd.Length -gt 0) {
          $n = 1
        } else {
          $n = [int]"${{ inputs.rdp_count }}"
          if ($n -lt 1) { $n = 1 }
          if ($n -gt 10) { $n = 10 }
        }
        $inc = @()
        for ($i = 1; $i -le $n; $i++) {
          $inc += @{ id = $i }
        }
        $json = @{ include = $inc } | ConvertTo-Json -Compress
        "matrix=$json" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

        $multi = if ($n -gt 1) { '1' } else { '0' }
        "multi=$multi" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8

  rdp:
    needs: setup
    runs-on: windows-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 10
    timeout-minutes: 370
    env:
      RDP_USER: Bullettemporary
      RDP_PASS: Bullet@12345

    steps:
    - name: Set CRD flag early (safe read)
      run: |
        $crd = @'
        ${{ inputs.crd_code }}
        '@.Trim()
        if ($crd.Length -gt 0) {
          "CRD_ENABLED=1" | Out-File -Append $env:GITHUB_ENV
        } else {
          "CRD_ENABLED=0" | Out-File -Append $env:GITHUB_ENV
        }
        Write-Host "CRD_ENABLED=$([int]($crd.Length -gt 0))"

    - name: Install + Up Tailscale
      run: |
        $tsPath = "$env:ProgramFiles\Tailscale\tailscale.exe"
        if (-not (Test-Path $tsPath)) {
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $dst = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $dst
          Start-Process msiexec.exe -ArgumentList "/i","`"$dst`"","/quiet","/norestart" -Wait
          Remove-Item $dst -Force
        }
        & $tsPath logout | Out-Null
        & $tsPath up --authkey "${{ inputs.ts_authkey }}" --hostname "$env:TS_HOSTNAME" --accept-dns=true --accept-routes=true
        $ip4 = & $tsPath ip -4 | Select-Object -First 1
        "TAILSCALE_IP=$ip4" | Out-File -Append $env:GITHUB_ENV
        Write-Host "Tailscale IPv4: $ip4"

    - name: Enable RDP user + firewall
      run: |
        $u = $env:RDP_USER
        $p = $env:RDP_PASS
        $sec = ConvertTo-SecureString $p -AsPlainText -Force
        if (-not (Get-LocalUser -Name $u -EA SilentlyContinue)) {
          New-LocalUser -Name $u -Password $sec -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $u
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
        } else {
          Set-LocalUser -Name $u -Password $sec -AccountNeverExpires
          Enable-LocalUser -Name $u
          Add-LocalGroupMember -Group "Administrators" -Member $u -EA SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u -EA SilentlyContinue
        }
        Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
        Write-Host "RDP ready. user=$u pass=$p host=$env:TS_HOSTNAME ip=$env:TAILSCALE_IP"

    - name: Install RustDesk
      run: |
        $rdExe = "C:\Program Files\RustDesk\rustdesk.exe"
        if (-not (Test-Path $rdExe)) {
          $rdUrl = "https://github.com/rustdesk/rustdesk/releases/latest/download/rustdesk-1.3.1-x86_64.msi"
          $installer = "$env:TEMP\rustdesk.msi"
          Invoke-WebRequest -Uri $rdUrl -OutFile $installer
          Start-Process msiexec.exe -ArgumentList "/i","`"$installer`"","/quiet","/norestart" -Wait
          Remove-Item $installer -Force
        }
        Write-Host "RustDesk installed."

    - name: Open RustDesk ports (TCP 21115–21119, UDP 21116)
      run: |
        for ($p = 21115; $p -le 21119; $p++) {
          netsh advfirewall firewall delete rule name="RUST_TCP_$p" 2>$null
          netsh advfirewall firewall add rule name="RUST_TCP_$p" dir=in action=allow protocol=TCP localport=$p
        }
        netsh advfirewall firewall delete rule name="RUST_UDP_21116" 2>$null
        netsh advfirewall firewall add rule name="RUST_UDP_21116" dir=in action=allow protocol=UDP localport=21116

    - name: Keep alive (to ${{ env.RUNTIME_MINUTES }} mins)
      run: |
        $mins = [int]"${{ env.RUNTIME_MINUTES }}"
        $end = (Get-Date).AddMinutes($mins)
        while ((Get-Date) -lt $end) {
          Write-Host ("[RDP+RustDesk] Heartbeat " + (Get-Date).ToString("HH:mm:ss") + " | Till " + $end)
          Start-Sleep -Seconds 60
        }

    - name: Dispatch next or stop
      if: always()
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        $cycles = [int]"${{ inputs.cycles }}"
        if ($cycles -gt 0) {
          $next = $cycles - 1
          # Nếu hết cycles thì dispatch Stop.yml
          if ($next -le 0) {
            $url = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/rdp-tailscale-stop.yml/dispatches"
            $hdr = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
            $body = @{ ref = "${{ github.ref_name }}"; inputs = @{ ts_tailnet = "${{ inputs.ts_tailnet }}"; ts_api_key = "${{ inputs.ts_api_key }}"; base_prefix = "bullet"; max_count = "10"; dry_run = "false" } } | ConvertTo-Json -Depth 20
            Invoke-WebRequest -Method POST -Uri $url -Headers $hdr -Body $body | Out-Null
            Write-Host "Dispatched STOP."
          } else {
            $payload = @{
              ts_tailnet      = "${{ inputs.ts_tailnet }}"
              ts_api_key      = "${{ inputs.ts_api_key }}"
              ts_authkey      = "${{ inputs.ts_authkey }}"
              quick_test      = "${{ inputs.quick_test }}"
              runtime_minutes = "${{ inputs.runtime_minutes }}"
              do_purge        = "${{ inputs.do_purge }}"
              cycles          = "$next"
              rdp_count       = "${{ inputs.rdp_count }}"
              crd_code        = "${{ inputs.crd_code }}"
              crd_pin         = "${{ inputs.crd_pin }}"
            }
            $url2 = "https://api.github.com/repos/${{ github.repository }}/actions/workflows/B.yml/dispatches"
            $hdr2 = @{ Authorization = "Bearer $env:GH_TOKEN"; Accept = "application/vnd.github+json" }
            $body2 = @{ ref = "${{ github.ref_name }}"; inputs = $payload } | ConvertTo-Json -Depth 20
            Invoke-WebRequest -Method POST -Uri $url2 -Headers $hdr2 -Body $body2 | Out-Null
            Write-Host "Dispatched Workflow B+ with cycles=$next"
          }
        } else {
          Write-Host "No cycles configured. Done."
        }
